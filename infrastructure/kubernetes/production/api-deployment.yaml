apiVersion: apps/v1
kind: Deployment
metadata:
  name: ukp-api
  namespace: ukp-production
  labels:
    app: ukp-api
    version: v1.0.0
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ukp-api
  template:
    metadata:
      labels:
        app: ukp-api
        version: v1.0.0
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8002"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ukp-api-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: ukp-api
        image: ghcr.io/universal-knowledge-hub/api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8002
          name: http
          protocol: TCP
        env:
        - name: UKP_HOST
          value: "0.0.0.0"
        - name: UKP_PORT
          value: "8002"
        - name: UKP_ENVIRONMENT
          value: "production"
        - name: UKP_LOG_LEVEL
          value: "INFO"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ukp-database-secret
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: ukp-redis-secret
              key: redis-url
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ukp-openai-secret
              key: api-key
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ukp-anthropic-secret
              key: api-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        persistentVolumeClaim:
          claimName: ukp-logs-pvc
      - name: data
        persistentVolumeClaim:
          claimName: ukp-data-pvc
      nodeSelector:
        node-role: worker
      tolerations:
      - key: "node-role"
        operator: "Equal"
        value: "worker"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ukp-api
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: ukp-api-service
  namespace: ukp-production
  labels:
    app: ukp-api
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8002
    protocol: TCP
    name: http
  selector:
    app: ukp-api
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ukp-api-ingress
  namespace: ukp-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0"
spec:
  tls:
  - hosts:
    - api.ukp.example.com
    secretName: ukp-api-tls
  rules:
  - host: api.ukp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ukp-api-service
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ukp-api-hpa
  namespace: ukp-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ukp-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ukp-api-pdb
  namespace: ukp-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: ukp-api 