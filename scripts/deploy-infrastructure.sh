#!/bin/bash

# Universal Knowledge Platform - Infrastructure Deployment Script
# This script deploys the complete infrastructure using Terraform

set -e

echo "🚀 Deploying Universal Knowledge Platform Infrastructure"
echo "========================================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
print_status "Checking prerequisites..."

# Check if Terraform is installed
if ! command -v terraform &> /dev/null; then
    print_error "Terraform is not installed. Please install Terraform first."
    exit 1
fi

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null; then
    print_error "AWS CLI is not installed. Please install AWS CLI first."
    exit 1
fi

# Check if kubectl is installed
if ! command -v kubectl &> /dev/null; then
    print_warning "kubectl is not installed. Kubernetes operations will be limited."
fi

print_success "All prerequisites met"

# Configuration
ENVIRONMENT=${1:-"dev"}
AWS_REGION=${2:-"us-east-1"}

print_status "Deploying infrastructure for environment: $ENVIRONMENT"
print_status "AWS Region: $AWS_REGION"

# Create terraform.tfvars file
print_status "Creating Terraform configuration..."

cat > infrastructure/terraform.tfvars << EOF
# Universal Knowledge Platform - Terraform Variables
# Generated by deployment script

aws_region = "$AWS_REGION"
environment = "$ENVIRONMENT"

# Database configuration
db_password = "UKP_$(date +%s)_$(openssl rand -hex 8)"

# Network configuration
vpc_cidr = "10.0.0.0/16"
availability_zones = ["${AWS_REGION}a", "${AWS_REGION}b", "${AWS_REGION}c"]
private_subnet_cidrs = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
public_subnet_cidrs = ["10.0.101.0/24", "10.0.102.0/24", "10.0.103.0/24"]

# Domain configuration
domain_name = "universal-knowledge-platform.com"
certificate_arn = ""

# Monitoring configuration
enable_monitoring = true
enable_logging = true
backup_retention_days = 7

# Instance configuration
instance_type = "t3.medium"
desired_capacity = 2
max_capacity = 5
min_capacity = 1
enable_autoscaling = true

# Tags
tags = {
  Project     = "universal-knowledge-platform"
  Environment = "$ENVIRONMENT"
  ManagedBy   = "terraform"
  Team        = "platform"
}
EOF

print_success "Terraform configuration created"

# Initialize Terraform
print_status "Initializing Terraform..."
cd infrastructure
terraform init

# Plan the deployment
print_status "Planning infrastructure deployment..."
terraform plan -var-file="terraform.tfvars" -out=tfplan

# Ask for confirmation
echo ""
echo "📋 Infrastructure deployment plan:"
echo "=================================="
terraform show tfplan | grep -E "(Plan:|#|~|\+|\-)"
echo ""

read -p "Do you want to proceed with the deployment? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_warning "Deployment cancelled by user"
    exit 0
fi

# Apply the deployment
print_status "Deploying infrastructure..."
terraform apply tfplan

# Get outputs
print_status "Retrieving infrastructure outputs..."
CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint)
VPC_ID=$(terraform output -raw vpc_id)
RDS_ENDPOINT=$(terraform output -raw rds_endpoint)
REDIS_ENDPOINT=$(terraform output -raw redis_endpoint)
ALB_DNS=$(terraform output -raw alb_dns_name)

# Save outputs to file
cat > ../infrastructure-outputs.json << EOF
{
  "environment": "$ENVIRONMENT",
  "aws_region": "$AWS_REGION",
  "cluster_endpoint": "$CLUSTER_ENDPOINT",
  "vpc_id": "$VPC_ID",
  "rds_endpoint": "$RDS_ENDPOINT",
  "redis_endpoint": "$REDIS_ENDPOINT",
  "alb_dns_name": "$ALB_DNS",
  "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF

print_success "Infrastructure deployment completed!"
print_status "Outputs saved to infrastructure-outputs.json"

# Configure kubectl
if command -v kubectl &> /dev/null; then
    print_status "Configuring kubectl for EKS cluster..."
    aws eks update-kubeconfig --region $AWS_REGION --name ukp-cluster-$ENVIRONMENT
    
    # Verify cluster access
    if kubectl cluster-info &> /dev/null; then
        print_success "Kubernetes cluster access configured"
        
        # Deploy Kubernetes manifests
        print_status "Deploying Kubernetes manifests..."
        kubectl apply -f ../k8s/namespace.yaml
        kubectl apply -f ../k8s/api-deployment.yaml
        kubectl apply -f ../k8s/api-service.yaml
        
        print_success "Kubernetes manifests deployed"
    else
        print_warning "Could not configure kubectl. Please configure manually."
    fi
else
    print_warning "kubectl not available. Kubernetes deployment skipped."
fi

# Deploy monitoring stack
print_status "Deploying monitoring stack..."
kubectl apply -f ../monitoring/prometheus-config.yaml

print_success "Monitoring stack deployed"

# Create deployment summary
cat > ../deployment-summary.md << EOF
# Universal Knowledge Platform - Infrastructure Deployment Summary

## Deployment Details
- **Environment**: $ENVIRONMENT
- **AWS Region**: $AWS_REGION
- **Deployment Time**: $(date -u +%Y-%m-%dT%H:%M:%SZ)

## Infrastructure Components
- ✅ EKS Cluster: ukp-cluster-$ENVIRONMENT
- ✅ VPC: $VPC_ID
- ✅ RDS Database: $RDS_ENDPOINT
- ✅ Redis Cache: $REDIS_ENDPOINT
- ✅ Application Load Balancer: $ALB_DNS
- ✅ Kubernetes Namespace: universal-knowledge-platform
- ✅ API Deployment: ukp-api
- ✅ Monitoring: Prometheus + Grafana

## Next Steps
1. Configure database connections
2. Deploy application containers
3. Set up SSL certificates
4. Configure monitoring alerts
5. Run smoke tests

## Access Information
- **Kubernetes Cluster**: $CLUSTER_ENDPOINT
- **API Endpoint**: http://$ALB_DNS
- **Database**: $RDS_ENDPOINT
- **Cache**: $REDIS_ENDPOINT

## Security Notes
- All resources are tagged with environment: $ENVIRONMENT
- Database password is securely generated
- Security groups restrict access appropriately
- SSL/TLS certificates need to be configured

## Cost Estimation
- EKS Cluster: ~$150/month
- RDS Database: ~$50/month
- ElastiCache: ~$30/month
- Load Balancer: ~$20/month
- **Total Estimated**: ~$250/month

## Troubleshooting
- Check CloudWatch logs for application issues
- Use kubectl logs for container debugging
- Monitor AWS costs in Cost Explorer
- Review security groups for connectivity issues
EOF

print_success "Deployment summary created: deployment-summary.md"

echo ""
echo "🎉 Infrastructure deployment completed successfully!"
echo ""
echo "📋 Next steps:"
echo "1. Review deployment-summary.md"
echo "2. Configure application secrets"
echo "3. Deploy application containers"
echo "4. Set up monitoring and alerting"
echo "5. Run end-to-end tests"
echo ""
echo "📊 Access your infrastructure:"
echo "- Kubernetes: kubectl cluster-info"
echo "- API: http://$ALB_DNS"
echo "- Database: $RDS_ENDPOINT"
echo "" 