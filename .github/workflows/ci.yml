name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.13]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f "requirements-dev.txt" ]; then
          pip install -r requirements-dev.txt
        fi
        pip install pytest pytest-cov pytest-asyncio black flake8 bandit mypy
    
    - name: Lint with flake8
      run: |
        # Use the project's .flake8 configuration
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --statistics
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt
    
    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports --no-strict-optional
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=api --cov=agents --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        NEXT_PUBLIC_API_BASE_URL: http://localhost:8002
        NEXT_PUBLIC_API_KEY: test-key

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: [test, frontend-test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: false
        tags: universal-knowledge-hub:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.frontend
        push: false
        tags: universal-knowledge-hub-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  quality-gates:
    runs-on: ubuntu-latest
    needs: [test, frontend-test, security, build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check test coverage threshold
      run: |
        if [ -f "coverage.xml" ]; then
          coverage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
          echo "Coverage: $coverage%"
          if (( $(echo "$coverage < 70" | bc -l) )); then
            echo "❌ Test coverage below 70% threshold"
            exit 1
          fi
          echo "✅ Test coverage meets threshold"
        else
          echo "⚠️ No coverage report found"
        fi
    
    - name: Check security scan results
      run: |
        if [ -f "bandit-report.json" ]; then
          high_issues=$(python -c "import json; data=json.load(open('bandit-report.json')); print(len([i for i in data['results'] if i['issue_severity'] == 'HIGH']))")
          if [ "$high_issues" -gt 0 ]; then
            echo "❌ Found $high_issues high security issues"
            exit 1
          fi
          echo "✅ No high security issues found"
        fi 