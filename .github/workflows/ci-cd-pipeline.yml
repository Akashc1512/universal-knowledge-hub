name: 🚀 Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Code Quality & Security
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 mypy bandit safety

      - name: 🎨 Code formatting check
        run: black --check --diff .

      - name: 🔍 Linting
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🔍 Type checking
        run: mypy . --ignore-missing-imports

      - name: 🔒 Security scanning
        run: |
          bandit -r . -f json -o bandit-report.json
          safety check --json --output safety-report.json

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # 🧪 Testing Suite
  testing:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: 🧪 Unit tests
        run: |
          pytest tests/unit-tests/ -v --cov=. --cov-report=xml --cov-report=html
          coverage report --show-missing

      - name: 🧪 Integration tests
        run: |
          pytest tests/integration-tests/ -v --cov=. --cov-report=xml

      - name: 🧪 Performance tests
        run: |
          pytest tests/performance-tests/ -v

      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # 🔒 Security & Compliance
  security-compliance:
    name: 🔒 Security & Compliance
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 SAST scanning
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: 🔒 Container scanning
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 🔒 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔒 Dependency scanning
        run: |
          pip install safety
          safety check --json --output safety-report.json

      - name: 📊 Upload security artifacts
        uses: actions/upload-artifact@v3
        with:
          name: security-artifacts
          path: |
            safety-report.json
            trivy-results.sarif

  # 🐳 Container Build & Test
  container-build:
    name: 🐳 Container Build & Test
    runs-on: ubuntu-latest
    needs: [testing, security-compliance]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🐳 Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🐳 Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/web-app
          file: ./frontend/web-app/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔒 Container vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

  # 🚀 Deployment
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [container-build]
    environment: staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: 🔐 Configure kubectl
        run: |
          aws eks update-kubeconfig --name ukp-staging-cluster --region ${{ secrets.AWS_REGION }}

      - name: 🚀 Deploy to staging
        run: |
          kubectl apply -f infrastructure/kubernetes/staging/
          kubectl set image deployment/ukp-api ukp-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          kubectl set image deployment/ukp-frontend ukp-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}

      - name: 🧪 Smoke tests
        run: |
          ./scripts/smoke-tests.sh staging

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [container-build]
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔐 Configure kubectl
        run: |
          aws eks update-kubeconfig --name ukp-production-cluster --region ${{ secrets.AWS_REGION }}

      - name: 🚀 Blue-Green deployment
        run: |
          ./scripts/blue-green-deployment.sh production ${{ github.sha }}

      - name: 🧪 Production smoke tests
        run: |
          ./scripts/smoke-tests.sh production

      - name: 📊 Performance monitoring
        run: |
          ./scripts/performance-monitoring.sh

  # 📊 Monitoring & Alerting
  monitoring:
    name: 📊 Monitoring & Alerting
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📊 Setup monitoring
        run: |
          ./scripts/setup-monitoring.sh

      - name: 📊 Configure alerting
        run: |
          ./scripts/configure-alerting.sh

      - name: 📊 Health checks
        run: |
          ./scripts/health-checks.sh

  # 📈 Analytics & Reporting
  analytics:
    name: 📈 Analytics & Reporting
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📊 Generate deployment report
        run: |
          ./scripts/generate-deployment-report.sh

      - name: 📊 Update metrics dashboard
        run: |
          ./scripts/update-metrics-dashboard.sh

      - name: 📊 Send notifications
        run: |
          ./scripts/send-deployment-notifications.sh

  # 🔄 Rollback Strategy
  rollback:
    name: 🔄 Rollback Strategy
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: 🔄 Trigger rollback
        run: |
          ./scripts/rollback-deployment.sh

      - name: 📊 Rollback notification
        run: |
          ./scripts/send-rollback-notification.sh 