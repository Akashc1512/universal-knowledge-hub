version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ukp-backend
    environment:
      - DATABASE_URL=postgresql://postgres:ukp_secure_password_2024@postgres:5432/ukp_db
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=ukp_neo4j_password_2024
      - CORS_ORIGINS=http://localhost:3001,http://frontend:3000
      - ADMIN_API_KEY=admin-key-123
      - USER_API_KEY=user-key-456
      - READONLY_API_KEY=readonly-key-789
    ports:
      - "8002:8002"
    depends_on:
      - redis
      - postgres
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ukp-network

  # Frontend Next.js Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: ukp-frontend
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8002
      - NEXT_PUBLIC_API_KEY=user-key-456
    ports:
      - "3001:3000"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ukp-network

  # Redis Cache
  redis:
    image: redis/redis-stack-server:latest
    container_name: ukp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ukp-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ukp-postgres
    environment:
      POSTGRES_PASSWORD: ukp_secure_password_2024
      POSTGRES_DB: ukp_db
      POSTGRES_USER: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ukp-network

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: ukp-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ukp-network

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: ukp-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - ukp-network

volumes:
  redis_data:
  postgres_data:
  es_data:

networks:
  ukp-network:
    driver: bridge 